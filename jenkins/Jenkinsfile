import groovy.json.JsonSlurperClassic

pipeline {
    
    agent {
        label "Dev"
    }
    
    environment {
        dockerRegistry = "ghcr.io"
        dockerOwner = "maksimenkavn"        
        pass = ""
        app_API = "maksimenkavn/time-app-api-dev"
        app_FRONT = "maksimenkavn/time-app-frontend-dev"
        dockerImageTagAPI = "${app_API}"
        dockerImageTagFRONT = "${app_FRONT}"
        dockerRemoveTag = "${dockerRegistry}/${dockerOwner}/${app}:${old_number}"
    }

    stages {
        stage('Stop Services') {
            steps {
                sh """
                docker stop time-app_frontend_1
                docker stop time-app_api_1
                docker system prune -f                                
                docker rmi -f ${app_API}
                docker rmi -f ${app_FRONT}             
                """
            }
        }

        stage('Build API') {
            steps {
                script {
                    path = 'time/time-app/api'
                }
                sh """                                               
                docker build -t ${app_API} -f ${path}/Dockerfile ${path}
                """
            }
        }

        stage('Build FRONT') {
            steps {
                script {
                    path = 'time/time-app/frontend'
                }
                sh "docker build -t ${app_FRONT} -f ${path}/Dockerfile ${path}"
            }
        }

        stage('Test') {
            steps {
                sh "echo Test"                
            }
        }        
 
        stage('Push image') {
            steps {
                // withCredentials([usernamePassword(credentialsId: 'DockerHubCredentials', passwordVariable: 'pass', usernameVariable: 'maksimenkavn')])
                sh """echo ${pass} | docker login -u ${dockerOwner} --password-stdin
                docker push ${dockerImageTagAPI}
                docker push ${dockerImageTagFRONT}
                """                
            }
        }
                
        stage('Start Services') {
            steps {
                sh """                  
                  echo "Build# $BUILD_ID"                  
                  docker-compose -f ./time/time-app/docker-compose-pub.yml up -d
                """
            }
        }

    }
    post {
        always {
            cleanWs()
        }
    }
}