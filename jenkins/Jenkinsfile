pipeline {
    
    agent any
    
    environment {
        dockerRegistry = "ghcr.io"
        dockerOwner = "maksimenkavn"        
        id_buld = $BUILD_ID
        app_API = "maksimenkavn/time-app-api-dev"
        app_FRONT = "maksimenkavn/time-app-frontend-dev"
        dockerImageTag = "${dockerRegistry}/${dockerOwner}/${app}:${env.BUILD_NUMBER}"
        dockerRemoveTag = "${dockerRegistry}/${dockerOwner}/${app}:${old_number}"
    }

    stages {
        stage('Stop Services') {
            steps {
                sh """               
                docker system prune -f                                
                docker rmi -f ${app_API}
                docker rmi -f ${app_FRONT}
                """
            }
        }

        stage('Build API') {
            steps {
                script {
                    path = 'time/time-app/api'
                }
                sh """                                               
                docker build -t ${app_API} -f ${path}/Dockerfile ${path}
                """
            }
        }

        stage('Build FRONT') {
            steps {
                script {
                    path = 'time/time-app/frontend'
                }
                sh "docker build -t ${app_FRONT} -f ${path}/Dockerfile ${path}"
            }
        }

        stage('Test') {
            steps {
                echo Test                
            }
        }
        //stage('Make image') {
        //    environment {
        //        appPath = "${path}/target/"
        //    }
        //    steps {
        //        sh """                
        //        docker rm -f ${app}
        //        docker rmi -f ${app}
        //        docker build -t ${dockerImageTag} -f ${path}/Dockerfile-make ${path}"""
        //    }
        //}
 //       stage('Push image') {
 //           steps {
 //               withCredentials([usernamePassword(credentialsId: 'github-https', passwordVariable: 'pass', usernameVariable: 'user')]) {
 //                   sh """echo ${pass} | docker login ${dockerRegistry} -u ${user} --password-stdin
 //                   docker push ${dockerImageTag}"""
 //               }
 //           }
 //       }
    }
    post {
        always {
            cleanWs()
        }
    }
}